+=======+
|  Git   \
+=================
------------------------------------------------------------------------+
Configuración inicial de usuario (solo se hace para el primer proyecto) |
------------------------------------------------------------------------+
$ git config --global user.email "email"
$ git config --global user.name "usuario"
  ej: $ git config --global user.email "albertomaria@gmail.com"
      $ git config --global user.name "albertoperez"
··································································
$ git help     #MUESTRA AYUDA DE LOS COMANDOS Git
$ git status   #MUESTRA AYUDA DEL COMANDO status (EN EL NAVEGADOR)
··································································
Áreas de trabajo:
Workong área
Staging área (add)
Repositorio (commit)

-------------------------------------------------------+
Iniciar el seguimiento a un proyecto y hacer respaldos |
-------------------------------------------------------+
$ git init                    #INICIO DEL SEGUIMIENTO
$ git status                  #MUESTRA EL STATUS
$ git status -s               #MUESTRA EL STATUS
$ git add archivo.extension   #PASA AL ÁREA DE TRABAJO EL archivo.extension
$ git add .                   #PASA AL ÁREA DE TRABAJO TODOS LOS ARCHIVOS Y CARPETAS
$ git commit -m "Etiqueta"    #RESPALDA EL ÁREA DE TRABAJO Y LE PONE LA "Etiqueta"
$ git commit -am "Etiqueta"   #PASA EL ARCHIVO AL ÁREA DE TRABAJO Y HACE RESPALDO "Etiqueta"
··············································
Para nuevos respaldos se repiten los comandos:
$ git add .
$ git commit -m "Etiqueta"

----------------------------+
Administración de respaldos |
----------------------------+
$ git log --oneline                    #MUESTRA LOS RESPALDOS EXISTENTES
$ git reset --soft 7142213             #BORRA LOS COMMITS POSTERIORES AL COMMIT 7142213 PERO MANTIENE EL PROYECTO COMO ESTÁ EN EL NIVEL ACTUAL
$ git reset --hard 7142213             #RESTAURA AL COMMIT 7142213 BORRANDO LOS RESPALDOS POSTERIORES AL COMMIT 7142213 Y TODOS LOS CAMBIOS ACTUALES
························································
Revisión del proyecto en el estado de commits anteriores. Nos permite ver como estaba el proyecto en cualquier commit anterior sin borrar ningún commit
$ git checkout 69f65c4   #SITUA EL PROYECTO EN EL COMMIT 69f65c4 
$ git checkout master    #SITUA EL PROYECTO AL ÚLTIMO COMMIT 

+=============================================+
|  Ignorar archivos y/o carpetas (.gitignore)  \
+===============================================+=======
$ git check-ignore *   #LISTA LOS ARCHIVOS IGNORADOS
Creación del archivo .gitignore (tiene que estar en el directorio raíz)
Se crea con cualquier editor de texto y especifica los archivos y carpetas que serán ignorados
Ejemplo de contenido de un archivo .gitignore:
leeme.txt   #IGNORA EN TODAS LAS CARPETAS TODOS LOS ARCHIVOS QUE SE LLAMEN leeme.txt
/soporte/   #IGNORA LA CARPETA soporte Y TODOS LOS ARCHIVOS QUE CONTENGA
*.txt       #IGNORA TODOS LOS ARCHIVOS QUE TENGAN LA EXTENSIÓN ,txt

+==================+
|  Ramas (branch)   \
+============================
Conceptos: master y head:
master: #ES LA RAMA INICIAL DE TRABAJO ASIGNADA AL proyecto
head:   #ES EL PUNTO DEL PROYECTO EN EL QUE ESTAMOS SITUADOS

-------------------------+
Ver las ramas existentes |
-------------------------+
$ git branch #MUESTRA LAS RAMAS EXISTENTES INDICANDO CON UN * LA RAMA ACTUAL DE TRABAJO

---------------+
Crear una rama |
---------------+
$ git branch Prueba_de_código #CREA LA RAMA Prueba_de_código

--------------------+
Moverse entre ramas |
--------------------+
$ git checkout Prueba_de_código #CAMBIA EL PROYECTO A LA RAMA Prueba_de_código
NOTA: Este cambio solo aparecerá en la rama Prueba_de_código
$ git checkout -b Nueva_Rama   #CREA LA RAMA Nueva_Rama Y SE SITÚA EN ELLA

-----------+
Unir ramas |
-----------+
Para unir la rama master con la rama Prueba_de_código nos situamos primero en la rama que va a absorber a la otra
$ git checkout master
$ git merge Prueba_de_código #FUSIONA LAS RAMAS master Y Prueba_de_código

---------------+
Eliminar ramas |
---------------+
$ git branch -d Prueba_de_código #BORRA LA RAMA Prueba_de_código
______________________
+====================+
|  Etiquetas (tags)   \
+==============================
Se utilizan para respaldar versiones funcionales del proyecto.

------------------+
Crear una versión |
------------------+
$ git tag 210225v1.3 -m "Comandos básicos esenciales"   #CREA LA VERSIÓN 210225v1.3 Y LA DESCRIBE CON LA ETIQUETA Comandos básicos esenciales
$ git push --tags    #SUBE LA VERSIÓN A Github

---------------------+
Eliminar una versión |
---------------------+
$ git tag -d 210225v1.1   #ELIMINA LA VERSIÓN 210225v1.1

________________________________________________________
+==========+
|  GitHub   \
+====================
------------------+
Crear repositorio |
------------------+
1. Crear un registro en la página 'github.com' 
2. Pulsar botón verde 'Create repository'
3. Redactar 'Repository name'y 'Description (optional)'
4. Pulsar botón verde 'Create repository'
5. Copiar la opción:
git remote add origin https://github.com/albertomariaperez/Comandos-Git-GitHub.git
6. Pegar el texto copiado en la cónsola de Git y pulsar la tecla 'Enter'
7. copiar de https://github.com la opción: 'git push -u origin main'
8. Pegar en la cónsola  git la opción 'https://github.com' y pulsar enter
9. Actualizar la página https://github.com y se debe observar el repositorio subido

----------------+
Actualizaciones |
----------------+
Desde GitHub > Equipo local
1. Editar los archivos en github.com
2. En la cónsola git ejecutar la instrucción:
$ git pull
----------------+
Desde Equipo local > GitHub
1. Se realiza todo el proceso para hacer nuevos commits
2. En la cónsola git ejecutar la instrucción:
$ git push -u origin main

__________________________
+========================+
|   Comentarios finales   \
+==================================
